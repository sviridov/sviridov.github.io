<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Emacs | Свиридов Александр]]></title>
  <link href="http://sviridov.github.io/blog/categories/emacs/atom.xml" rel="self"/>
  <link href="http://sviridov.github.io/"/>
  <updated>2014-02-24T14:12:30+06:00</updated>
  <id>http://sviridov.github.io/</id>
  <author>
    <name><![CDATA[Свиридов Александр]]></name>
    <email><![CDATA[sviridov.vmi@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Emacs: динамическая подсветка Elisp-кода]]></title>
    <link href="http://sviridov.github.io/blog/2014/02/22/emacs-dynamic-elisp-highlighting/"/>
    <updated>2014-02-22T16:57:57+06:00</updated>
    <id>http://sviridov.github.io/blog/2014/02/22/emacs-dynamic-elisp-highlighting</id>
    <content type="html"><![CDATA[<p>Как ты наверняка знаешь, языком программирования <a href="http://www.gnu.org/software/emacs/">Emacs</a> является <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/index.html#Top">Elisp</a>. Его поддержка в стандартной поставке <a href="http://www.gnu.org/software/emacs/">Emacs</a> достаточно хороша. Но вот чего мне действительно не хватает &ndash; это качественной подсветки символов (идентификаторов), в том числе определяемых мной. Ну что же, давай ее добавим.</p>

<!-- more -->


<p>В этом нам поможет <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Font-Lock.html">Font Lock mode</a>. Основной способ поиска кода для подсветки в <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Font-Lock.html">Font Lock mode</a> &ndash; это регулярные выражения, но они нам не подходят, так как нам нужен способ выделить символы исходя из их семантики. На этот случай <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Font-Lock.html">Font Lock mode</a> предоставляет возможность передать вместо регулярного выражения особого вида функцию, которая сама осуществит поиск кода для подсветки.</p>

<p>Ограничения накладываемые на такую функцию:</p>

<ul>
<li>Она должна принимать в качестве аргумента лимит поиска &ndash; точку до которой будет производиться поиск (начиная с текущей точки).</li>
<li>В случае успешного поиска функция должна:

<ul>
<li>вернуть не-nil значение;</li>
<li>передвинуть текущую точку на позицию после найденной части кода;</li>
<li>сохранить найденную часть кода в <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Match-Data.html#Match-Data">match-data</a>.</li>
</ul>
</li>
</ul>


<p>Пример подсветки имен макросов:</p>

<p>```common-lisp</p>

<p>(defun highlight-emacs-lisp&mdash;matched-symbol ()
  &ldquo;Возвращает найденный символ (идентификатор)&rdquo;
  (intern-soft (buffer-substring (match-beginning 0) (match-end 0))))</p>

<p>(defun highlight-emacs-lisp&mdash;macro-symbol-p (symbol)
  &ldquo;Проверка на то, что с символом связан макрос&rdquo;
  (eq &lsquo;macro (car-safe (symbol-function symbol))))</p>

<p>(defun highlight-emacs-lisp-macro (limit)
  &ldquo;Поиск имен макросов&rdquo;
  (loop</p>

<pre><code>(unless (re-search-forward "[^() \"\t\n',@]+" limit t)
  (return nil))

(let ((candidate (highlight-emacs-lisp--matched-symbol)))
  (when (highlight-emacs-lisp--macro-symbol-p candidate)
    (set-match-data (list (match-beginning 0) (match-end 0)))
    (return t)))))
</code></pre>

<p>(font-lock-add-keywords &lsquo;emacs-lisp-mode
 &rsquo;((highlight-emacs-lisp-macro . &lsquo;font-lock-keyword-face)))
```</p>

<p>Отлично, теперь обобщим этот метод для функций и глобальных переменных, плюс добавим подсветку в <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Lisp-Interaction.html">IELM</a>:</p>

<p><code>``common-lisp
(defmacro define-emacs-lisp-symbols-highlighter (name args selector)
</code>(defun ,name (limit)</p>

<pre><code>(loop

  (unless (re-search-forward "[^() \"\t\n',@]+" limit t)
    (return nil))

  (when ((lambda ,args ,selector)
         (intern-soft (buffer-substring (match-beginning 0) (match-end 0))))
    (set-match-data (list (match-beginning 0) (match-end 0)))
    (return t)))))
</code></pre>

<p>(define-emacs-lisp-symbols-highlighter highlight-emacs-lisp-macro (symbol)
  (eq &lsquo;macro (car-safe (symbol-function symbol))))</p>

<p>(define-emacs-lisp-symbols-highlighter highlight-emacs-lisp-function (symbol)
  (eq &lsquo;lambda (car-safe (symbol-function symbol))))</p>

<p>(define-emacs-lisp-symbols-highlighter highlight-emacs-lisp-compiled-or-primitive-function (symbol)
  (or (subrp (symbol-function symbol))</p>

<pre><code>  (eq 'compiled-function (type-of (symbol-function symbol)))))
</code></pre>

<p>(define-emacs-lisp-symbols-highlighter highlight-emacs-lisp-global-variable (symbol)
  (and (boundp symbol)</p>

<pre><code>   (not (or (eq symbol t)
            (eq symbol nil)))))
</code></pre>

<p>(dolist (mode &lsquo;(emacs-lisp-mode inferior-emacs-lisp-mode))
  (font-lock-add-keywords mode</p>

<pre><code>'((highlight-emacs-lisp-macro . 'font-lock-keyword-face)
  (highlight-emacs-lisp-function . 'font-lock-function-name-face)
  (highlight-emacs-lisp-compiled-or-primitive-function . 'font-lock-builtin-face)
  (highlight-emacs-lisp-global-variable . 'font-lock-variable-name-face))
t))
</code></pre>

<p>```</p>

<p><a href="https://github.com/sviridov/.emacs.d/blob/master/config/elisp/init-elisp-highlight.el">Конфиг на Github</a> и результат:</p>

<p><img src="/images/posts/emacs-dynamic-elisp-highlighting.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs: статический анализ Ruby-кода]]></title>
    <link href="http://sviridov.github.io/blog/2014/02/20/emacs-ruby-static-code-analysis/"/>
    <updated>2014-02-20T14:22:10+06:00</updated>
    <id>http://sviridov.github.io/blog/2014/02/20/emacs-ruby-static-code-analysis</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/bbatsov/rubocop">Rubocop</a> &ndash; это полезный инструмент для любого Ruby-разработчика. <a href="https://github.com/bbatsov/rubocop">Rubocop</a> осуществляет статический анализ Ruby-кода основываясь на <a href="https://github.com/bbatsov/ruby-style-guide">Ruby Style Guide</a> и помогает сделать твой код (или код твоих коллег) чуточку читабельнее (а значит и лучше).</p>

<p>Вот только есть один минус &ndash; ручной запуск <a href="https://github.com/bbatsov/rubocop">Rubocop</a> из терминала. Сам понимаешь, хочется интеграции этого чуда в среду разработки, так чтобы оно само. Ну что же, давай заинтегрируем.</p>

<!-- more -->


<h2>rvm.el</h2>

<p>Ты ведь испольуешь <a href="http://rvm.io/">rvm</a> и <a href="http://bundler.io/">bundler</a>? Тогда мне не нужно объяснять тебе почему важно настроить взаимодействие <a href="http://www.gnu.org/software/emacs/">Emacs</a> и <a href="http://rvm.io/">rvm</a>.</p>

<p>Для этого дела нам потребуется пакет <a href="https://github.com/senny/rvm.el">rvm.el</a>. Его установка и настройка тривиальна в случае если у тебя настроен <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Packages.html#Packages">ELPA</a> (<a href="https://github.com/sviridov/.emacs.d/blob/master/config/init-package.el">пример конфига</a>). Добавь следующие строки в свой конфигурационный файл:</p>

<p>```common-lisp
;; Устанавливаем пакет rvm.el
(require-package &lsquo;rvm)</p>

<p>;; Выбираем соответсвующую версию ruby (и версии гемов)
;; для каждого ruby-файла
(add-hook &lsquo;ruby-mode-hook #'rvm-activate-corresponding-ruby)
```</p>

<p>Вот и все, <a href="https://github.com/senny/rvm.el">rvm.el</a> настроен.</p>

<h2>Flycheck</h2>

<p><a href="https://github.com/flycheck/flycheck">Flycheck</a> &ndash; это пакет, который является связуещей прослойкой между различными статическими анализаторами кода и <a href="http://www.gnu.org/software/emacs/">Emacs</a>. Штука крайне полезная, все детали по <a href="https://github.com/flycheck/flycheck">ссылке</a>. Итак, настройка:</p>

<p>```common-lisp
;; Устанавливаем пакет Flycheck
(require-package &lsquo;flycheck)</p>

<p>;; Запускаем Flycheck глобально
(add-hook &lsquo;after-init-hook #'global-flycheck-mode)</p>

<p>;; или только для Ruby-mode
(add-hook &lsquo;ruby-mode-hook #'flycheck-mode)</p>

<p>;; Запускаем проверки при открытие файла и после его сохранения
(setq-default flycheck-check-syntax-automatically &lsquo;(save mode-enabled))
```</p>

<p>Все, <a href="https://github.com/flycheck/flycheck">Flycheck</a> настроен. А знаешь что самое приятное? <a href="https://github.com/flycheck/flycheck">Flycheck</a> сам начнет использовать <a href="https://github.com/bbatsov/rubocop">Rubocop</a>! Добрая магия.</p>

<p><img src="/images/posts/emacs-with-flycheck-and-rubocop-1.png"></p>

<h2>P.S. rubocop-emacs</h2>

<p>Но есть еще маленькая штука о которой стоит упоминуть. Пакет <a href="https://github.com/bbatsov/rubocop-emacs">rubocop-emacs</a> от <a href="https://github.com/bbatsov">автора</a> <a href="https://github.com/bbatsov/rubocop">Rubocop</a>. Это очень простая обертка над &ldquo;терминальным&rdquo; <a href="https://github.com/bbatsov/rubocop">Rubocop</a>. А полезна она будет для автоматической коррекции части некрасивостей в твоем коде. Итак:</p>

<p>```common-lisp
;; Устанавливаем rubocop-emacs
(require-package &lsquo;rubocop)</p>

<p>;; Добавляем rubocop-emacs к Ruby-mode
(add-hook &lsquo;ruby-mode-hook #'rubocop-mode)</p>

<p>;; Перечитываем файл после его изменения вне Emacs
(add-hook &lsquo;ruby-mode-hook #'auto-revert-mode)
```</p>

<p>Жми <strong><code>C-c C-r F</code></strong> и вуаля &ndash; код стал чуточку чище.</p>

<p><img src="/images/posts/emacs-with-flycheck-and-rubocop-2.png"></p>
]]></content>
  </entry>
  
</feed>
