<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Clojure | Свиридов Александр]]></title>
  <link href="http://sviridov.github.io/blog/categories/clojure/atom.xml" rel="self"/>
  <link href="http://sviridov.github.io/"/>
  <updated>2014-08-31T21:07:22+06:00</updated>
  <id>http://sviridov.github.io/</id>
  <author>
    <name><![CDATA[Свиридов Александр]]></name>
    <email><![CDATA[sviridov.vmi@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Clojure: Решаем японские кроссворды с помощью core.logic]]></title>
    <link href="http://sviridov.github.io/blog/2014/08/07/clojure-nonograms-core-dot-logic-solver/"/>
    <updated>2014-08-07T16:56:21+06:00</updated>
    <id>http://sviridov.github.io/blog/2014/08/07/clojure-nonograms-core-dot-logic-solver</id>
    <content type="html"><![CDATA[<p>Я никогда не был сторонником одной единственной парадигмы программирования. Мне всегда нравилось изучать новые идеи и учиться комбинировать их с изученными ранее. Сейчас я решил немного поэкспериментировать с логическим программированием (или программированием в ограничениях). В качестве задачки для эксперимента я возьмусь решать японские кроссворды (nonogram). А реализую я ее с помощью библиотеки <a href="https://github.com/clojure/core.logic">core.logic</a> для языка <a href="http://clojure.org/">Clojure</a>.</p>

<!-- more -->


<h2>Приготовления</h2>

<p>Для начала сгенерируем новый проект с помощью <a href="https://github.com/technomancy/leiningen/">Leiningen</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>lein new nonograms-solver
</span></code></pre></td></tr></table></div></figure>


<p>Опишем информацию о нашем проекте в файле <a href="https://github.com/sviridov/nonograms-solver/blob/master/project.clj">project.clj</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defproject </span><span class="nv">nonograms-solver</span> <span class="s">&quot;0.1.0-SNAPSHOT&quot;</span>
</span><span class='line'>  <span class="ss">:description</span> <span class="s">&quot;Nonograms solver powered by clojure.core.logic&quot;</span>
</span><span class='line'>  <span class="ss">:url</span> <span class="s">&quot;https://github.com/sviridov/nonograms-solver&quot;</span>
</span><span class='line'>  <span class="ss">:license</span> <span class="p">{</span><span class="ss">:name</span> <span class="s">&quot;The MIT License&quot;</span>
</span><span class='line'>            <span class="ss">:url</span>  <span class="s">&quot;http://opensource.org/licenses/MIT&quot;</span><span class="p">}</span>
</span><span class='line'>  <span class="ss">:dependencies</span> <span class="p">[[</span><span class="nv">org.clojure/clojure</span> <span class="s">&quot;1.5.1&quot;</span><span class="p">]</span>
</span><span class='line'>                 <span class="p">[</span><span class="nv">org.clojure/core.logic</span> <span class="s">&quot;0.8.8&quot;</span><span class="p">]]</span>
</span><span class='line'>  <span class="ss">:aot</span> <span class="ss">:all</span>
</span><span class='line'>  <span class="ss">:main</span> <span class="nv">nonograms-solver.main</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Добавим точку входа в приложение в файл <a href="https://github.com/sviridov/nonograms-solver/blob/master/src/nonograms_solver/main.clj">main.clj</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">nonograms-solver.main</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:use</span> <span class="nv">nonograms-solver.core</span>
</span><span class='line'>        <span class="nv">nonograms-solver.io</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:gen-class</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">-main</span> <span class="p">[</span><span class="o">&amp;</span> <span class="nv">args</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">== </span><span class="p">(</span><span class="nb">count </span><span class="nv">args</span><span class="p">)</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">-&gt; </span><span class="p">(</span><span class="nb">first </span><span class="nv">args</span><span class="p">)</span> <span class="nv">read-hints</span> <span class="nv">solve</span> <span class="nv">print-nonogram</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">println </span><span class="s">&quot;Usage: NonogramsSolver &lt;filename&gt;&quot;</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Ввод-Вывод</h2>

<p>Поместим операции ввода-вывода в файл <a href="https://github.com/sviridov/nonograms-solver/blob/master/src/nonograms_solver/io.clj">io.clj</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">nonograms-solver.io</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:use</span> <span class="p">[</span><span class="nv">clojure.java.io</span> <span class="ss">:only</span> <span class="p">(</span><span class="nf">reader</span><span class="p">)]))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Для хранения подсказок для кроссворда будем использовать обычную хэш-таблицу следующего формата:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="c1">;; XXXXX</span>
</span><span class='line'><span class="c1">;;  X  X</span>
</span><span class='line'><span class="c1">;;   X X</span>
</span><span class='line'><span class="c1">;;    XX</span>
</span><span class='line'><span class="c1">;;     X</span>
</span><span class='line'><span class="p">{</span><span class="ss">:vertical</span>   <span class="p">[[</span><span class="mi">1</span><span class="p">]</span> <span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">1</span><span class="p">]</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">1</span><span class="p">]</span> <span class="p">[</span><span class="mi">5</span><span class="p">]]</span>
</span><span class='line'> <span class="ss">:horizontal</span> <span class="p">[[</span><span class="mi">5</span><span class="p">]</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">1</span><span class="p">]</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">1</span><span class="p">]</span> <span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="p">[</span><span class="mi">1</span><span class="p">]]}</span>
</span></code></pre></td></tr></table></div></figure>


<p>В связи с этим, реализация ввода данных тривиальна:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">read-hints</span> <span class="p">[</span><span class="nv">filename</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">with-open </span><span class="p">[</span><span class="nv">input</span> <span class="p">(</span><span class="nf">java.io.PushbackReader.</span> <span class="p">(</span><span class="nf">reader</span> <span class="nv">filename</span><span class="p">))]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">read </span><span class="nv">input</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Форматом выходных данных будет последовательность строк, где строка &ndash; это последовательность нолей и единиц (0 &ndash; пусто, 1 &ndash; закрашено). Реализуем вывод данных:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn- </span><span class="nv">each</span> <span class="p">[</span><span class="nv">xs</span> <span class="nv">function</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">when </span><span class="p">(</span><span class="nb">seq </span><span class="nv">xs</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">function</span> <span class="p">(</span><span class="nb">first </span><span class="nv">xs</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">each</span> <span class="p">(</span><span class="nb">rest </span><span class="nv">xs</span><span class="p">)</span> <span class="nv">function</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn- </span><span class="nv">print-nonogram-cell</span> <span class="p">[</span><span class="nv">cell</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">zero? </span><span class="nv">cell</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">print </span><span class="s">&quot; &quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">print </span><span class="s">&quot;X&quot;</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn- </span><span class="nv">print-nonogram-row</span> <span class="p">[</span><span class="nv">row</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">each</span> <span class="nv">row</span> <span class="nv">print-nonogram-cell</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">newline</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">print-nonogram</span> <span class="p">[</span><span class="nv">rows</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">each</span> <span class="nv">rows</span> <span class="nv">print-nonogram-row</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">flush</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Итак, к самому интересному!</p>

<h2>Решение кроссворда</h2>

<p>Сразу хочу отметить, что это не самая серьезная программа и я не ставлю здесь приоритет на производительность. Для меня важно решить эту задачу максимально лаканично.</p>

<p>Поместим логику решения кроссворда в файл <a href="https://github.com/sviridov/nonograms-solver/blob/master/src/nonograms_solver/core.clj">core.clj</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">nonograms-solver.core</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:refer-clojure</span> <span class="ss">:exclude</span> <span class="p">[</span><span class="nb">== &lt; </span><span class="nv">+</span><span class="p">])</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:use</span>  <span class="nv">clojure.core.logic</span>
</span><span class='line'>        <span class="p">[</span><span class="nv">clojure.core.logic.arithmetic</span> <span class="ss">:only</span> <span class="p">(</span><span class="nf">&lt;</span><span class="p">)]</span>
</span><span class='line'>        <span class="p">[</span><span class="nv">clojure.core.logic.fd</span> <span class="ss">:only</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">domain</span> <span class="nv">in</span><span class="p">)]))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Итак, как же мы будем искать решение нашего кроссворда? Никак! Главный вопрос в логическом программирование не в том <em>&ldquo;Как найти решение&rdquo;</em>, а в том <em>&ldquo;Что такое решение&rdquo;</em>. Дать ответ на этот вопрос мы можем с помощью ограничений, накладываемых на решение. Какие ограничения мы можем наложить на решение японского кроссворда?</p>

<ul>
<li>Решение &ndash; это набор ячеек (клеток).</li>
<li>Ячейка может быть закрашена или пуста.</li>
<li>Все ячейки поделены на ряды и колонки.

<ul>
<li>Каждой линии (ряду или колонке) ставится в соответствие свой шаблон (подсказка).</li>
<li>Содержимое линии должно соответствовать своему шаблону согласно правилам японского кроссворда.</li>
</ul>
</li>
</ul>


<p>Определим функцию, в которой отобразим описанные выше правила:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">solve</span> <span class="p">[{</span><span class="nv">vertical-hints</span> <span class="ss">:vertical</span> <span class="nv">horizontal-hints</span> <span class="ss">:horizontal</span><span class="p">}]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">grid-width</span>  <span class="p">(</span><span class="nb">count </span><span class="nv">vertical-hints</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">grid-height</span> <span class="p">(</span><span class="nb">count </span><span class="nv">horizontal-hints</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">grid-size</span>   <span class="p">(</span><span class="nb">* </span><span class="nv">grid-width</span> <span class="nv">grid-height</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">;; Набор логических переменных</span>
</span><span class='line'>        <span class="c1">;; Каждая переменная это ячейка кроссворда</span>
</span><span class='line'>        <span class="nv">cells</span>   <span class="p">(</span><span class="nf">repeatedly</span> <span class="nv">grid-size</span> <span class="nv">lvar</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">;; Строки кроссворда (состоят из логических переменных)</span>
</span><span class='line'>        <span class="nv">rows</span>    <span class="p">(</span><span class="nf">partition</span> <span class="nv">grid-width</span> <span class="nv">cells</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">;; Столбцы кроссворда (состоят из логических переменных)</span>
</span><span class='line'>        <span class="nv">columns</span> <span class="p">(</span><span class="nb">apply map vector </span><span class="nv">rows</span><span class="p">)]</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">(</span><span class="nf">-&gt;&gt;</span> <span class="p">(</span><span class="nf">run</span> <span class="mi">1</span> <span class="p">[</span><span class="nv">result</span><span class="p">]</span> <span class="c1">; Запускаем поиск решения.</span>
</span><span class='line'>                         <span class="c1">; Ищем до тех пор, пока не найдем одно</span>
</span><span class='line'>
</span><span class='line'>           <span class="c1">;; Решение - это набор ячеек</span>
</span><span class='line'>           <span class="p">(</span><span class="nb">== </span><span class="nv">result</span> <span class="nv">cells</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>           <span class="c1">;; Ячейка может быть закрашена (1) или пуста (0)</span>
</span><span class='line'>           <span class="p">(</span><span class="nf">everyg</span> <span class="o">#</span><span class="p">(</span><span class="nf">in</span> <span class="nv">%</span> <span class="p">(</span><span class="nf">domain</span> <span class="mi">0</span> <span class="mi">1</span><span class="p">))</span> <span class="nv">cells</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>           <span class="c1">;; Каждой линии ставится в соответсвие свой шаблон</span>
</span><span class='line'>           <span class="p">(</span><span class="nf">constrain-lines</span> <span class="nv">rows</span> <span class="nv">horizontal-hints</span><span class="p">)</span>
</span><span class='line'>           <span class="p">(</span><span class="nf">constrain-lines</span> <span class="nv">columns</span> <span class="nv">vertical-hints</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>         <span class="c1">;; run возвращает множество результатов, берем первый</span>
</span><span class='line'>         <span class="p">(</span><span class="nf">first</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>         <span class="c1">;; Возвращаем решение как последовательность рядов</span>
</span><span class='line'>         <span class="p">(</span><span class="nf">partition</span> <span class="nv">grid-width</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ограничим линии подсказками:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn- </span><span class="nv">constrain-lines</span> <span class="p">[</span><span class="nv">lines</span> <span class="nv">hints</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">cond </span><span class="p">(</span><span class="nb">and </span><span class="p">(</span><span class="nb">seq </span><span class="nv">lines</span><span class="p">)</span> <span class="p">(</span><span class="nb">seq </span><span class="nv">hints</span><span class="p">))</span> <span class="c1">; Если остались линии и подсказки</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">all</span>                          <span class="c1">; Ограничиваем первую линию первой подсказкой и рекурсивно повторяем</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">match-line-pattern</span> <span class="p">(</span><span class="nb">first </span><span class="nv">lines</span><span class="p">)</span> <span class="p">(</span><span class="nb">first </span><span class="nv">hints</span><span class="p">)</span> <span class="nv">false</span><span class="p">)</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">constrain-lines</span> <span class="p">(</span><span class="nb">rest </span><span class="nv">lines</span><span class="p">)</span> <span class="p">(</span><span class="nb">rest </span><span class="nv">hints</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">;; Если закончились линии и подсказки - все прошло хорошо</span>
</span><span class='line'>        <span class="p">(</span><span class="nb">and </span><span class="p">(</span><span class="nf">empty?</span> <span class="nv">lines</span><span class="p">)</span> <span class="p">(</span><span class="nf">empty?</span> <span class="nv">hints</span><span class="p">))</span> <span class="nv">succeed</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">;; Иначе - что-то пошло не так...</span>
</span><span class='line'>        <span class="ss">:else</span> <span class="nv">fail</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Итак, последнее что нам осталось сделать, это подобрать заполнение для линии соответственно ее шаблону. Для этого определим новое логическое правило <code>match-line-pattern</code>, которое будет перебирать различные варианты окраски клеток кроссворда с учетом уже существующих догадок (полученных от сопоставления других линий пересекающих текущую).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">defne</span> <span class="nv">match-line-pattern</span> <span class="p">[</span><span class="nv">line</span> <span class="nv">pattern</span> <span class="nv">chain?</span><span class="p">]</span>
</span><span class='line'>  <span class="c1">;; line - последовательность логических переменных для сопоставления</span>
</span><span class='line'>  <span class="c1">;; pattern - подсказка, накладывающая ограничения на содержимое line</span>
</span><span class='line'>  <span class="c1">;; chain? - флаг, сигнализирующий, что предыдущая ячейка была закрашена</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">([[</span> <span class="p">]</span> <span class="p">[</span> <span class="p">]</span> <span class="nv">_</span><span class="p">])</span> <span class="c1">; Если линия закончилась и подсказок</span>
</span><span class='line'>  <span class="p">([[</span> <span class="p">]</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="nv">_</span><span class="p">])</span> <span class="c1">; не осталось, то цель выполнена успешно</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">;; Если предыдущая ячейка была закрашена и</span>
</span><span class='line'>  <span class="c1">;; текущая подсказка закончилась (0), значит</span>
</span><span class='line'>  <span class="c1">;; мы дошли до разрыва между закрашенными последовательностями</span>
</span><span class='line'>  <span class="p">([[</span><span class="mi">0</span> <span class="k">. </span><span class="nv">line-tail</span><span class="p">]</span> <span class="p">[</span><span class="mi">0</span> <span class="k">. </span><span class="nv">pattern-tail</span><span class="p">]</span> <span class="nv">true</span><span class="p">]</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">match-line-pattern</span> <span class="nv">line-tail</span> <span class="nv">pattern-tail</span> <span class="nv">false</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">;; Если еще осталась подсказка, то пробуем закрасить ячейку</span>
</span><span class='line'>  <span class="p">([[</span><span class="mi">1</span> <span class="k">. </span><span class="nv">line-tail</span><span class="p">]</span> <span class="p">[</span><span class="nv">counter</span> <span class="k">. </span><span class="nv">pattern-tail</span><span class="p">]</span> <span class="nv">_</span><span class="p">]</span>
</span><span class='line'>     <span class="p">(</span><span class="nb">&lt; </span><span class="mi">0</span> <span class="nv">counter</span><span class="p">)</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">fresh</span> <span class="p">[</span><span class="nv">new-counter</span> <span class="nv">new-pattern</span><span class="p">]</span>
</span><span class='line'>       <span class="p">(</span><span class="nb">+ </span><span class="nv">new-counter</span> <span class="mi">1</span> <span class="nv">counter</span><span class="p">)</span>
</span><span class='line'>       <span class="p">(</span><span class="nf">conso</span> <span class="nv">new-counter</span> <span class="nv">pattern-tail</span> <span class="nv">new-pattern</span><span class="p">)</span>
</span><span class='line'>       <span class="p">(</span><span class="nf">match-line-pattern</span> <span class="nv">line-tail</span> <span class="nv">new-pattern</span> <span class="nv">true</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">;; Если предыдущая ячейка не была закрашена, то</span>
</span><span class='line'>  <span class="c1">;; пробуем оставить текущую пустой</span>
</span><span class='line'>  <span class="p">([[</span><span class="mi">0</span> <span class="k">. </span><span class="nv">line-tail</span><span class="p">]</span> <span class="nv">_</span> <span class="nv">false</span><span class="p">]</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">match-line-pattern</span> <span class="nv">line-tail</span> <span class="nv">pattern</span> <span class="nv">false</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ну что же, попробуем запустить:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="c1">;; {:vertical [[5] [1 3] [2 2] [1 1 1] [2 2] [1 3] [5]]</span>
</span><span class='line'><span class="c1">;;  :horizontal [[7] [1 1 1 1] [2 1 2] [3 3] [7]]}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">nonograms-solver.main&gt;</span> <span class="p">(</span><span class="nf">-main</span> <span class="s">&quot;test/nonograms/2.txt&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nv">XXXXXXX</span>
</span><span class='line'><span class="nv">X</span> <span class="nv">X</span> <span class="nv">X</span> <span class="nv">X</span>
</span><span class='line'><span class="nv">XX</span> <span class="nv">X</span> <span class="nv">XX</span>
</span><span class='line'><span class="nv">XXX</span> <span class="nv">XXX</span>
</span><span class='line'><span class="nv">XXXXXXX</span>
</span></code></pre></td></tr></table></div></figure>


<p>Отлично!</p>

<h2>P.S. Оптимизация</h2>

<p>Безусловно, в текущем варианте (полный перебор!) это чудо работает очень медленно. Для оптимизации я провел два очень простых трюка:</p>

<ul>
<li>Так как перебор внутри линий идет слева-направо и сверху-вниз, то в некоторых случаях кроссворд выгодно перевернуть.</li>
<li>Линии можно отсортировать по их &ldquo;значимости&rdquo; для кроссворда и проходить от самых к наименее &ldquo;значимым&rdquo;.</li>
</ul>


<p>На результат можно посмотреть <a href="https://github.com/sviridov/nonograms-solver">здесь</a>.</p>
]]></content>
  </entry>
  
</feed>
